package org.fisco.bcos.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class MusicChain extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50613ff7806100206000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303e9e609146100f6578063112d882d146102da5780631d2e4afd14610372578063455fa8a3146104215780634770ff8f146104f05780634da69c7d146107185780635c8014f7146107b0578063606589c01461090b578063610ca0c314610a005780636941833714610b815780636e0f2d2414610c305780637d33619714610cff578063832880e714610e80578063915d3c341461112c578063d396c70d146112ad578063d58b6626146113b1578063fb978de014611537575b600080fd5b34801561010257600080fd5b50610121600480360381019080803590602001909291905050506115ef565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156101cd5780820151818401526020810190506101b2565b50505050905090810190601f1680156101fa5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015610233578082015181840152602081019050610218565b50505050905090810190601f1680156102605780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561029957808201518184015260208101905061027e565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156102e657600080fd5b5061031b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118c0565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561035e578082015181840152602081019050610343565b505050509050019250505060405180910390f35b34801561037e57600080fd5b5061041f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611a25565b005b34801561042d57600080fd5b506104ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611b60565b005b3480156104fc57600080fd5b5061051b60048036038101908080359060200190929190505050611cda565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001861515151581526020018060200185810385528a818151815260200191508051906020019080838360005b838110156105a3578082015181840152602081019050610588565b50505050905090810190601f1680156105d05780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b838110156106095780820151818401526020810190506105ee565b50505050905090810190601f1680156106365780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b8381101561066f578082015181840152602081019050610654565b50505050905090810190601f16801561069c5780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156106d55780820151818401526020810190506106ba565b50505050905090810190601f1680156107025780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34801561072457600080fd5b50610759600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612059565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561079c578082015181840152602081019050610781565b505050509050019250505060405180910390f35b3480156107bc57600080fd5b50610909600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506121be565b005b34801561091757600080fd5b506109fe600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506124d3565b005b348015610a0c57600080fd5b50610b7f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612703565b005b348015610b8d57600080fd5b50610c2e600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612943565b005b348015610c3c57600080fd5b50610cfd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612ba0565b005b348015610d0b57600080fd5b50610e7e600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612de4565b005b348015610e8c57600080fd5b50610e95613024565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019080838360005b83811015610ee9578082015181840152602081019050610ece565b50505050905090810190601f168015610f165780820380516001836020036101000a031916815260200191505b5087810386528c818151815260200191508051906020019080838360005b83811015610f4f578082015181840152602081019050610f34565b50505050905090810190601f168015610f7c5780820380516001836020036101000a031916815260200191505b5087810385528b818151815260200191508051906020019080838360005b83811015610fb5578082015181840152602081019050610f9a565b50505050905090810190601f168015610fe25780820380516001836020036101000a031916815260200191505b5087810384528a818151815260200191508051906020019080838360005b8381101561101b578082015181840152602081019050611000565b50505050905090810190601f1680156110485780820380516001836020036101000a031916815260200191505b50878103835289818151815260200191508051906020019080838360005b83811015611081578082015181840152602081019050611066565b50505050905090810190601f1680156110ae5780820380516001836020036101000a031916815260200191505b50878103825288818151815260200191508051906020019080838360005b838110156110e75780820151818401526020810190506110cc565b50505050905090810190601f1680156111145780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b34801561113857600080fd5b506112ab600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613444565b005b3480156112b957600080fd5b5061135a600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613684565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561139d578082015181840152602081019050611382565b505050509050019250505060405180910390f35b3480156113bd57600080fd5b506113df600480360381019080803560ff169060200190929190505050613975565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200184151515158152602001838103835286818151815260200191508051906020019080838360005b83811015611491578082015181840152602081019050611476565b50505050905090810190601f1680156114be5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156114f75780820151818401526020810190506114dc565b50505050905090810190601f1680156115245780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561154357600080fd5b50611598600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613bc7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156115db5780820151818401526020810190506115c0565b505050509050019250505060405180910390f35b600080606080606060028681548110151561160657fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028781548110151561164757fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028881548110151561168857fe5b90600052602060002090600502016002016002898154811015156116a857fe5b906000526020600020906005020160030160028a8154811015156116c857fe5b9060005260206000209060050201600401828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561176e5780601f106117435761010080835404028352916020019161176e565b820191906000526020600020905b81548152906001019060200180831161175157829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561180a5780601f106117df5761010080835404028352916020019161180a565b820191906000526020600020905b8154815290600101906020018083116117ed57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118a65780601f1061187b576101008083540402835291602001916118a6565b820191906000526020600020905b81548152906001019060200180831161188957829003601f168201915b505050505090509450945094509450945091939590929450565b6060600080600090505b6003805490508160ff1610156119a6578373ffffffffffffffffffffffffffffffffffffffff1660038260ff1681548110151561190357fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611999578181908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360ff160217905550505b80806001019150506118ca565b81805480602002602001604051908101604052809291908181526020018280548015611a1757602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116119e05790505b505050505092505050919050565b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190611a7a929190613ea6565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004019080519060200190611ad0929190613ea6565b506040805190810160405280600481526020017f75736572000000000000000000000000000000000000000000000000000000008152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190611b5b929190613ea6565b505050565b6000339050600360a0604051908101604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600015158152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190611c93929190613f26565b506060820151816003019080519060200190611cb0929190613f26565b5060808201518160040160006101000a81548160ff02191690831515021790555050505050505050565b6000606080606060006060600187815481101515611cf457fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600188815481101515611d3557fe5b9060005260206000209060060201600101600189815481101515611d5557fe5b906000526020600020906006020160020160018a815481101515611d7557fe5b906000526020600020906006020160030160018b815481101515611d9557fe5b906000526020600020906006020160040160009054906101000a900460ff1660018c815481101515611dc357fe5b9060005260206000209060060201600501848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e695780601f10611e3e57610100808354040283529160200191611e69565b820191906000526020600020905b815481529060010190602001808311611e4c57829003601f168201915b50505050509450838054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f055780601f10611eda57610100808354040283529160200191611f05565b820191906000526020600020905b815481529060010190602001808311611ee857829003601f168201915b50505050509350828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fa15780601f10611f7657610100808354040283529160200191611fa1565b820191906000526020600020905b815481529060010190602001808311611f8457829003601f168201915b50505050509250808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561203d5780601f106120125761010080835404028352916020019161203d565b820191906000526020600020905b81548152906001019060200180831161202057829003601f168201915b5050505050905095509550955095509550955091939550919395565b6060600080600090505b6003805490508160ff16101561213f578373ffffffffffffffffffffffffffffffffffffffff1660038260ff1681548110151561209c57fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612132578181908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360ff160217905550505b8080600101915050612063565b818054806020026020016040519081016040528092919081815260200182805480156121b057602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116121795790505b505050505092505050919050565b60008033915060009050600090505b6001805490508160ff1610156124ca57856040518082805190602001908083835b60208310151561221357805182526020820191506020810190506020830392506121ee565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff1681548110151561225657fe5b906000526020600020906006020160010160405180828054600181600116156101000203166002900480156122c25780601f106122a05761010080835404028352918201916122c2565b820191906000526020600020905b8154815290600101906020018083116122ae575b505091505060405180910390206000191614801561234e57503373ffffffffffffffffffffffffffffffffffffffff1660018260ff1681548110151561230457fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156124bd57600260a0604051908101604052808973ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001878152602001868152602001858152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061247e929190613f26565b50606082015181600301908051906020019061249b929190613f26565b5060808201518160040190805190602001906124b8929190613f26565b505050505b80806001019150506121cd565b50505050505050565b600160c0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125de5780601f106125b3576101008083540402835291602001916125de565b820191906000526020600020905b8154815290600101906020018083116125c157829003601f168201915b50505050508152602001600115158152602001838152509080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190612683929190613f26565b5060408201518160020190805190602001906126a0929190613f26565b5060608201518160030190805190602001906126bd929190613f26565b5060808201518160040160006101000a81548160ff02191690831515021790555060a08201518160050190805190602001906126fa929190613f26565b50505050505050565b846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190612758929190613ea6565b50816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040190805190602001906127ae929190613ea6565b506040805190810160405280600881526020017f6d7573696369616e0000000000000000000000000000000000000000000000008152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190612839929190613ea6565b50836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201908051906020019061288f929190613ea6565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050190805190602001906128e5929190613ea6565b50826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301908051906020019061293b929190613ea6565b505050505050565b60008060009150339050600091505b6001805490508260ff161015612b9a578073ffffffffffffffffffffffffffffffffffffffff1660018360ff1681548110151561298b57fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015612ad35750836040518082805190602001908083835b602083101515612a1157805182526020820191506020810190506020830392506129ec565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018360ff16815481101515612a5457fe5b90600052602060002090600602016001016040518082805460018160011615610100020316600290048015612ac05780601f10612a9e576101008083540402835291820191612ac0565b820191906000526020600020905b815481529060010190602001808311612aac575b5050915050604051809103902060001916145b8015612b1357506001151560018360ff16815481101515612af057fe5b906000526020600020906006020160040160009054906101000a900460ff161515145b15612b8d57600060018360ff16815481101515612b2c57fe5b906000526020600020906006020160040160006101000a81548160ff0219169083151502179055508260018360ff16815481101515612b6757fe5b90600052602060002090600602016005019080519060200190612b8b929190613ea6565b505b8180600101925050612952565b50505050565b60008033915060009050600090505b6001805490508160ff161015612ddd5760018160ff16815481101515612bd157fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148015612d305750836040518082805190602001908083835b602083101515612c6e5780518252602082019150602081019050602083039250612c49565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff16815481101515612cb157fe5b90600052602060002090600602016001016040518082805460018160011615610100020316600290048015612d1d5780601f10612cfb576101008083540402835291820191612d1d565b820191906000526020600020905b815481529060010190602001808311612d09575b5050915050604051809103902060001916145b15612dd0578460018260ff16815481101515612d4857fe5b906000526020600020906006020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260018260ff16815481101515612daa57fe5b90600052602060002090600602016005019080519060200190612dce929190613ea6565b505b8080600101915050612baf565b5050505050565b846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190612e39929190613ea6565b50816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004019080519060200190612e8f929190613ea6565b506040805190810160405280600781526020017f636f6d70616e79000000000000000000000000000000000000000000000000008152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190612f1a929190613ea6565b50836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019080519060200190612f70929190613ea6565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005019080519060200190612fc6929190613ea6565b50826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301908051906020019061301c929190613ea6565b505050505050565b60608060608060608060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000018160010182600201836003018460040185600501858054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561311c5780601f106130f15761010080835404028352916020019161311c565b820191906000526020600020905b8154815290600101906020018083116130ff57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131b85780601f1061318d576101008083540402835291602001916131b8565b820191906000526020600020905b81548152906001019060200180831161319b57829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132545780601f1061322957610100808354040283529160200191613254565b820191906000526020600020905b81548152906001019060200180831161323757829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132f05780601f106132c5576101008083540402835291602001916132f0565b820191906000526020600020905b8154815290600101906020018083116132d357829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561338c5780601f106133615761010080835404028352916020019161338c565b820191906000526020600020905b81548152906001019060200180831161336f57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134285780601f106133fd57610100808354040283529160200191613428565b820191906000526020600020905b81548152906001019060200180831161340b57829003601f168201915b5050505050905096509650965096509650965050909192939495565b846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190613499929190613ea6565b50816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040190805190602001906134ef929190613ea6565b506040805190810160405280600581526020017f6a756467650000000000000000000000000000000000000000000000000000008152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061357a929190613ea6565b50836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190805190602001906135d0929190613ea6565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005019080519060200190613626929190613ea6565b50826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301908051906020019061367c929190613ea6565b505050505050565b6060600080600080925060009050600092505b6001805490508360ff1610156138f457856040518082805190602001908083835b6020831015156136dd57805182526020820191506020810190506020830392506136b8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018460ff1681548110151561372057fe5b9060005260206000209060060201600201604051808280546001816001161561010002031660029004801561378c5780601f1061376a57610100808354040283529182019161378c565b820191906000526020600020905b815481529060010190602001808311613778575b505091505060405180910390206000191614801561389d5750846040518082805190602001908083835b6020831015156137db57805182526020820191506020810190506020830392506137b6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018460ff1681548110151561381e57fe5b9060005260206000209060060201600301604051808280546001816001161561010002031660029004801561388a5780601f1061386857610100808354040283529182019161388a565b820191906000526020600020905b815481529060010190602001808311613876575b5050915050604051809103902060001916145b156138e75782828260ff168154811015156138b457fe5b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555080806001019150505b8280600101935050613697565b8180548060200260200160405190810160405280929190818152602001828054801561396557602002820191906000526020600020906000905b82829054906101000a900460ff1660ff168152602001906001019060208260000104928301926001038202915080841161392e5790505b5050505050935050505092915050565b600080606080600060038660ff1681548110151561398f57fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038760ff168154811015156139d357fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038860ff16815481101515613a1757fe5b906000526020600020906005020160020160038960ff16815481101515613a3a57fe5b906000526020600020906005020160030160038a60ff16815481101515613a5d57fe5b906000526020600020906005020160040160009054906101000a900460ff16828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b115780601f10613ae657610100808354040283529160200191613b11565b820191906000526020600020905b815481529060010190602001808311613af457829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613bad5780601f10613b8257610100808354040283529160200191613bad565b820191906000526020600020905b815481529060010190602001808311613b9057829003601f168201915b505050505091509450945094509450945091939590929450565b6060600080600080925060009050600092505b6002805490508360ff161015613e255785604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660028460ff16815481101515613c5157fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060001916148015613dce575084604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660028460ff16815481101515613d4657fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060001916145b15613e185782828260ff16815481101515613de557fe5b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555080806001019150505b8280600101935050613bda565b81805480602002602001604051908101604052809291908181526020018280548015613e9657602002820191906000526020600020906000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411613e5f5790505b5050505050935050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613ee757805160ff1916838001178555613f15565b82800160010185558215613f15579182015b82811115613f14578251825591602001919060010190613ef9565b5b509050613f229190613fa6565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613f6757805160ff1916838001178555613f95565b82800160010185558215613f95579182015b82811115613f94578251825591602001919060010190613f79565b5b509050613fa29190613fa6565b5090565b613fc891905b80821115613fc4576000816000905550600101613fac565b5090565b905600a165627a7a72305820242ca90a29dd4b2673e3dfaa70e0c64303b252b9737a3e1a502b0304c0e602240029";

    public static final String FUNC_GETRECORD = "getRecord";

    public static final String FUNC_GETNOTICENUMBERBYSTART = "getNoticeNumberByStart";

    public static final String FUNC_REGISTERUSER = "registerUser";

    public static final String FUNC_REGISTERNOTICE = "registerNotice";

    public static final String FUNC_GETMUSIC = "getMusic";

    public static final String FUNC_GETNOTICENUMBERBYTO = "getNoticeNumberByTo";

    public static final String FUNC_AUTHORIZEMUSIC = "authorizeMusic";

    public static final String FUNC_REGISTERMUSIC = "registerMusic";

    public static final String FUNC_REGISTERMUSICIAN = "registerMusician";

    public static final String FUNC_CANCELMUSIC = "cancelMusic";

    public static final String FUNC_TRANSFERMUSIC = "transferMusic";

    public static final String FUNC_REGISTERCOMPANY = "registerCompany";

    public static final String FUNC_GETUSER = "getUser";

    public static final String FUNC_REGISTERJUDGE = "registerJudge";

    public static final String FUNC_GETMUSICNUMBER = "getMusicNumber";

    public static final String FUNC_GETNOTICE = "getNotice";

    public static final String FUNC_GETRECORDNUMBER = "getRecordNumber";

    @Deprecated
    protected MusicChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MusicChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MusicChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MusicChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple5<String, String, String, String, String>> getRecord(BigInteger numbe) {
        final Function function = new Function(FUNC_GETRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(numbe)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, String>>(
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<List> getNoticeNumberByStart(String _start) {
        final Function function = new Function(FUNC_GETNOTICENUMBERBYSTART, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_start)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> registerUser(String _name, String _phone) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerUser(String _name, String _phone, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> registerNotice(String _to, String _music, String _info) {
        final Function function = new Function(
                FUNC_REGISTERNOTICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_music), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_info)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerNotice(String _to, String _music, String _info, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERNOTICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_music), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_info)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple6<String, String, String, String, Boolean, String>> getMusic(BigInteger numb) {
        final Function function = new Function(FUNC_GETMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(numb)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, Boolean, String>>(
                new Callable<Tuple6<String, String, String, String, Boolean, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, Boolean, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<List> getNoticeNumberByTo(String _to) {
        final Function function = new Function(FUNC_GETNOTICENUMBERBYTO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> authorizeMusic(String _to, String _binhash, String _alltime, String _music, String _info) {
        final Function function = new Function(
                FUNC_AUTHORIZEMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_music), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_info)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void authorizeMusic(String _to, String _binhash, String _alltime, String _music, String _info, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_AUTHORIZEMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_music), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_info)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> registerMusic(String _bin, String _mname, String _alltime) {
        final Function function = new Function(
                FUNC_REGISTERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_mname), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerMusic(String _bin, String _mname, String _alltime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_mname), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> registerMusician(String _name, String _id, String _location, String _phone, String _email) {
        final Function function = new Function(
                FUNC_REGISTERMUSICIAN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerMusician(String _name, String _id, String _location, String _phone, String _email, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERMUSICIAN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> cancelMusic(String _binhash, String _alltime) {
        final Function function = new Function(
                FUNC_CANCELMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void cancelMusic(String _binhash, String _alltime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CANCELMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> transferMusic(String _to, String _binhash, String _alltime) {
        final Function function = new Function(
                FUNC_TRANSFERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferMusic(String _to, String _binhash, String _alltime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> registerCompany(String _name, String _id, String _location, String _phone, String _email) {
        final Function function = new Function(
                FUNC_REGISTERCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerCompany(String _name, String _id, String _location, String _phone, String _email, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple6<String, String, String, String, String, String>> getUser() {
        final Function function = new Function(FUNC_GETUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, String>>(
                new Callable<Tuple6<String, String, String, String, String, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> registerJudge(String _name, String _id, String _location, String _phone, String _email) {
        final Function function = new Function(
                FUNC_REGISTERJUDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerJudge(String _name, String _id, String _location, String _phone, String _email, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERJUDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<List> getMusicNumber(String _mname, String _singer) {
        final Function function = new Function(FUNC_GETMUSICNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_mname), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_singer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple5<String, String, String, String, Boolean>> getNotice(BigInteger _idx) {
        final Function function = new Function(FUNC_GETNOTICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, Boolean>>(
                new Callable<Tuple5<String, String, String, String, Boolean>>() {
                    @Override
                    public Tuple5<String, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<List> getRecordNumber(String _user, String _author) {
        final Function function = new Function(FUNC_GETRECORDNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_user), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_author)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static MusicChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MusicChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MusicChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MusicChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MusicChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MusicChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MusicChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MusicChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MusicChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MusicChain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MusicChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MusicChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<MusicChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MusicChain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MusicChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MusicChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
