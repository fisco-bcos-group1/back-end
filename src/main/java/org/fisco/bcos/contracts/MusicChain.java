package org.fisco.bcos.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class MusicChain extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50614fd9806100206000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303e9e6091461011757806306168d51146102fb578063112d882d1461032b5780631d2e4afd146103c3578063455fa8a3146104725780634770ff8f146105415780634da69c7d146107695780635c8014f714610801578063606589c01461095c578063610ca0c314610a515780636941833714610bd257806369c212f614610c815780636e0f2d2414610f595780637176285a146110285780637d336197146112c7578063832880e714611448578063915d3c34146116f4578063d396c70d14611875578063d58b662614611979578063fb978de014611aff575b600080fd5b34801561012357600080fd5b5061014260048036038101908080359060200190929190505050611bb7565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156101ee5780820151818401526020810190506101d3565b50505050905090810190601f16801561021b5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015610254578082015181840152602081019050610239565b50505050905090810190601f1680156102815780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156102ba57808201518184015260208101905061029f565b50505050905090810190601f1680156102e75780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561030757600080fd5b50610329600480360381019080803560ff169060200190929190505050611e88565b005b34801561033757600080fd5b5061036c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ec7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103af578082015181840152602081019050610394565b505050509050019250505060405180910390f35b3480156103cf57600080fd5b50610470600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061202c565b005b34801561047e57600080fd5b5061053f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612167565b005b34801561054d57600080fd5b5061056c600480360381019080803590602001909291905050506122e1565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001861515151581526020018060200185810385528a818151815260200191508051906020019080838360005b838110156105f45780820151818401526020810190506105d9565b50505050905090810190601f1680156106215780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b8381101561065a57808201518184015260208101905061063f565b50505050905090810190601f1680156106875780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b838110156106c05780820151818401526020810190506106a5565b50505050905090810190601f1680156106ed5780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b8381101561072657808201518184015260208101905061070b565b50505050905090810190601f1680156107535780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34801561077557600080fd5b506107aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612660565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156107ed5780820151818401526020810190506107d2565b505050509050019250505060405180910390f35b34801561080d57600080fd5b5061095a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506127c5565b005b34801561096857600080fd5b50610a4f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612ada565b005b348015610a5d57600080fd5b50610bd0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612d0a565b005b348015610bde57600080fd5b50610c7f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612f4a565b005b348015610c8d57600080fd5b50610cc2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131a7565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019080838360005b83811015610d16578082015181840152602081019050610cfb565b50505050905090810190601f168015610d435780820380516001836020036101000a031916815260200191505b5087810386528c818151815260200191508051906020019080838360005b83811015610d7c578082015181840152602081019050610d61565b50505050905090810190601f168015610da95780820380516001836020036101000a031916815260200191505b5087810385528b818151815260200191508051906020019080838360005b83811015610de2578082015181840152602081019050610dc7565b50505050905090810190601f168015610e0f5780820380516001836020036101000a031916815260200191505b5087810384528a818151815260200191508051906020019080838360005b83811015610e48578082015181840152602081019050610e2d565b50505050905090810190601f168015610e755780820380516001836020036101000a031916815260200191505b50878103835289818151815260200191508051906020019080838360005b83811015610eae578082015181840152602081019050610e93565b50505050905090810190601f168015610edb5780820380516001836020036101000a031916815260200191505b50878103825288818151815260200191508051906020019080838360005b83811015610f14578082015181840152602081019050610ef9565b50505050905090810190601f168015610f415780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b348015610f6557600080fd5b50611026600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506135c8565b005b34801561103457600080fd5b506110d5600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061380c565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b83811015611153578082015181840152602081019050611138565b50505050905090810190601f1680156111805780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b838110156111b957808201518184015260208101905061119e565b50505050905090810190601f1680156111e65780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b8381101561121f578082015181840152602081019050611204565b50505050905090810190601f16801561124c5780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b8381101561128557808201518184015260208101905061126a565b50505050905090810190601f1680156112b25780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b3480156112d357600080fd5b50611446600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613dc6565b005b34801561145457600080fd5b5061145d614006565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019080838360005b838110156114b1578082015181840152602081019050611496565b50505050905090810190601f1680156114de5780820380516001836020036101000a031916815260200191505b5087810386528c818151815260200191508051906020019080838360005b838110156115175780820151818401526020810190506114fc565b50505050905090810190601f1680156115445780820380516001836020036101000a031916815260200191505b5087810385528b818151815260200191508051906020019080838360005b8381101561157d578082015181840152602081019050611562565b50505050905090810190601f1680156115aa5780820380516001836020036101000a031916815260200191505b5087810384528a818151815260200191508051906020019080838360005b838110156115e35780820151818401526020810190506115c8565b50505050905090810190601f1680156116105780820380516001836020036101000a031916815260200191505b50878103835289818151815260200191508051906020019080838360005b8381101561164957808201518184015260208101905061162e565b50505050905090810190601f1680156116765780820380516001836020036101000a031916815260200191505b50878103825288818151815260200191508051906020019080838360005b838110156116af578082015181840152602081019050611694565b50505050905090810190601f1680156116dc5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b34801561170057600080fd5b50611873600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614426565b005b34801561188157600080fd5b50611922600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614666565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561196557808201518184015260208101905061194a565b505050509050019250505060405180910390f35b34801561198557600080fd5b506119a7600480360381019080803560ff169060200190929190505050614957565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200184151515158152602001838103835286818151815260200191508051906020019080838360005b83811015611a59578082015181840152602081019050611a3e565b50505050905090810190601f168015611a865780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015611abf578082015181840152602081019050611aa4565b50505050905090810190601f168015611aec5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015611b0b57600080fd5b50611b60600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614ba9565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015611ba3578082015181840152602081019050611b88565b505050509050019250505060405180910390f35b6000806060806060600286815481101515611bce57fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600287815481101515611c0f57fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600288815481101515611c5057fe5b9060005260206000209060050201600201600289815481101515611c7057fe5b906000526020600020906005020160030160028a815481101515611c9057fe5b9060005260206000209060050201600401828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d365780601f10611d0b57610100808354040283529160200191611d36565b820191906000526020600020905b815481529060010190602001808311611d1957829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611dd25780601f10611da757610100808354040283529160200191611dd2565b820191906000526020600020905b815481529060010190602001808311611db557829003601f168201915b50505050509150808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e6e5780601f10611e4357610100808354040283529160200191611e6e565b820191906000526020600020905b815481529060010190602001808311611e5157829003601f168201915b505050505090509450945094509450945091939590929450565b600160038260ff16815481101515611e9c57fe5b906000526020600020906005020160040160006101000a81548160ff02191690831515021790555050565b6060600080600090505b6003805490508160ff161015611fad578373ffffffffffffffffffffffffffffffffffffffff1660038260ff16815481101515611f0a57fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611fa0578181908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360ff160217905550505b8080600101915050611ed1565b8180548060200260200160405190810160405280929190818152602001828054801561201e57602002820191906000526020600020906000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411611fe75790505b505050505092505050919050565b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190612081929190614e88565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040190805190602001906120d7929190614e88565b506040805190810160405280600481526020017f75736572000000000000000000000000000000000000000000000000000000008152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190612162929190614e88565b505050565b6000339050600360a0604051908101604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600015158152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061229a929190614f08565b5060608201518160030190805190602001906122b7929190614f08565b5060808201518160040160006101000a81548160ff02191690831515021790555050505050505050565b60006060806060600060606001878154811015156122fb57fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660018881548110151561233c57fe5b906000526020600020906006020160010160018981548110151561235c57fe5b906000526020600020906006020160020160018a81548110151561237c57fe5b906000526020600020906006020160030160018b81548110151561239c57fe5b906000526020600020906006020160040160009054906101000a900460ff1660018c8154811015156123ca57fe5b9060005260206000209060060201600501848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124705780601f1061244557610100808354040283529160200191612470565b820191906000526020600020905b81548152906001019060200180831161245357829003601f168201915b50505050509450838054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561250c5780601f106124e15761010080835404028352916020019161250c565b820191906000526020600020905b8154815290600101906020018083116124ef57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125a85780601f1061257d576101008083540402835291602001916125a8565b820191906000526020600020905b81548152906001019060200180831161258b57829003601f168201915b50505050509250808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126445780601f1061261957610100808354040283529160200191612644565b820191906000526020600020905b81548152906001019060200180831161262757829003601f168201915b5050505050905095509550955095509550955091939550919395565b6060600080600090505b6003805490508160ff161015612746578373ffffffffffffffffffffffffffffffffffffffff1660038260ff168154811015156126a357fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612739578181908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360ff160217905550505b808060010191505061266a565b818054806020026020016040519081016040528092919081815260200182805480156127b757602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116127805790505b505050505092505050919050565b60008033915060009050600090505b6001805490508160ff161015612ad157856040518082805190602001908083835b60208310151561281a57805182526020820191506020810190506020830392506127f5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff1681548110151561285d57fe5b906000526020600020906006020160010160405180828054600181600116156101000203166002900480156128c95780601f106128a75761010080835404028352918201916128c9565b820191906000526020600020905b8154815290600101906020018083116128b5575b505091505060405180910390206000191614801561295557503373ffffffffffffffffffffffffffffffffffffffff1660018260ff1681548110151561290b57fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15612ac457600260a0604051908101604052808973ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001878152602001868152602001858152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190612a85929190614f08565b506060820151816003019080519060200190612aa2929190614f08565b506080820151816004019080519060200190612abf929190614f08565b505050505b80806001019150506127d4565b50505050505050565b600160c0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612be55780601f10612bba57610100808354040283529160200191612be5565b820191906000526020600020905b815481529060010190602001808311612bc857829003601f168201915b50505050508152602001600115158152602001838152509080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190612c8a929190614f08565b506040820151816002019080519060200190612ca7929190614f08565b506060820151816003019080519060200190612cc4929190614f08565b5060808201518160040160006101000a81548160ff02191690831515021790555060a0820151816005019080519060200190612d01929190614f08565b50505050505050565b846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190612d5f929190614e88565b50816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004019080519060200190612db5929190614e88565b506040805190810160405280600881526020017f6d7573696369616e0000000000000000000000000000000000000000000000008152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190612e40929190614e88565b50836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019080519060200190612e96929190614e88565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005019080519060200190612eec929190614e88565b50826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019080519060200190612f42929190614e88565b505050505050565b60008060009150339050600091505b6001805490508260ff1610156131a1578073ffffffffffffffffffffffffffffffffffffffff1660018360ff16815481101515612f9257fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156130da5750836040518082805190602001908083835b6020831015156130185780518252602082019150602081019050602083039250612ff3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018360ff1681548110151561305b57fe5b906000526020600020906006020160010160405180828054600181600116156101000203166002900480156130c75780601f106130a55761010080835404028352918201916130c7565b820191906000526020600020905b8154815290600101906020018083116130b3575b5050915050604051809103902060001916145b801561311a57506001151560018360ff168154811015156130f757fe5b906000526020600020906006020160040160009054906101000a900460ff161515145b1561319457600060018360ff1681548110151561313357fe5b906000526020600020906006020160040160006101000a81548160ff0219169083151502179055508260018360ff1681548110151561316e57fe5b90600052602060002090600602016005019080519060200190613192929190614e88565b505b8180600101925050612f59565b50505050565b60608060608060608060008060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000018160010182600201836003018460040185600501858054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561329f5780601f106132745761010080835404028352916020019161329f565b820191906000526020600020905b81548152906001019060200180831161328257829003601f168201915b50505050509550848054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561333b5780601f106133105761010080835404028352916020019161333b565b820191906000526020600020905b81548152906001019060200180831161331e57829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133d75780601f106133ac576101008083540402835291602001916133d7565b820191906000526020600020905b8154815290600101906020018083116133ba57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134735780601f1061344857610100808354040283529160200191613473565b820191906000526020600020905b81548152906001019060200180831161345657829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561350f5780601f106134e45761010080835404028352916020019161350f565b820191906000526020600020905b8154815290600101906020018083116134f257829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135ab5780601f10613580576101008083540402835291602001916135ab565b820191906000526020600020905b81548152906001019060200180831161358e57829003601f168201915b505050505090509650965096509650965096505091939550919395565b60008033915060009050600090505b6001805490508160ff1610156138055760018160ff168154811015156135f957fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480156137585750836040518082805190602001908083835b6020831015156136965780518252602082019150602081019050602083039250613671565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff168154811015156136d957fe5b906000526020600020906006020160010160405180828054600181600116156101000203166002900480156137455780601f10613723576101008083540402835291820191613745565b820191906000526020600020905b815481529060010190602001808311613731575b5050915050604051809103902060001916145b156137f8578460018260ff1681548110151561377057fe5b906000526020600020906006020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260018260ff168154811015156137d257fe5b906000526020600020906006020160050190805190602001906137f6929190614e88565b505b80806001019150506135d7565b5050505050565b600060608060608060008090505b6001805490508160ff161015613dba5760018160ff1681548110151561383c57fe5b906000526020600020906006020160040160009054906101000a900460ff16801561395a5750876040518082805190602001908083835b6020831015156138985780518252602082019150602081019050602083039250613873565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff168154811015156138db57fe5b906000526020600020906006020160020160405180828054600181600116156101000203166002900480156139475780601f10613925576101008083540402835291820191613947565b820191906000526020600020905b815481529060010190602001808311613933575b5050915050604051809103902060001916145b8015613a595750866040518082805190602001908083835b6020831015156139975780518252602082019150602081019050602083039250613972565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff168154811015156139da57fe5b90600052602060002090600602016003016040518082805460018160011615610100020316600290048015613a465780601f10613a24576101008083540402835291820191613a46565b820191906000526020600020905b815481529060010190602001808311613a32575b5050915050604051809103902060001916145b15613dad5760018160ff16815481101515613a7057fe5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660018260ff16815481101515613ab457fe5b906000526020600020906006020160010160018360ff16815481101515613ad757fe5b906000526020600020906006020160020160018460ff16815481101515613afa57fe5b906000526020600020906006020160030160018560ff16815481101515613b1d57fe5b9060005260206000209060060201600501838054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613bc35780601f10613b9857610100808354040283529160200191613bc3565b820191906000526020600020905b815481529060010190602001808311613ba657829003601f168201915b50505050509350828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613c5f5780601f10613c3457610100808354040283529160200191613c5f565b820191906000526020600020905b815481529060010190602001808311613c4257829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613cfb5780601f10613cd057610100808354040283529160200191613cfb565b820191906000526020600020905b815481529060010190602001808311613cde57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613d975780601f10613d6c57610100808354040283529160200191613d97565b820191906000526020600020905b815481529060010190602001808311613d7a57829003601f168201915b5050505050905095509550955095509550613dbb565b808060010191505061381a565b5b509295509295909350565b846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190613e1b929190614e88565b50816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004019080519060200190613e71929190614e88565b506040805190810160405280600781526020017f636f6d70616e79000000000000000000000000000000000000000000000000008152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190613efc929190614e88565b50836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019080519060200190613f52929190614e88565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005019080519060200190613fa8929190614e88565b50826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019080519060200190613ffe929190614e88565b505050505050565b60608060608060608060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000018160010182600201836003018460040185600501858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156140fe5780601f106140d3576101008083540402835291602001916140fe565b820191906000526020600020905b8154815290600101906020018083116140e157829003601f168201915b50505050509550848054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561419a5780601f1061416f5761010080835404028352916020019161419a565b820191906000526020600020905b81548152906001019060200180831161417d57829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142365780601f1061420b57610100808354040283529160200191614236565b820191906000526020600020905b81548152906001019060200180831161421957829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142d25780601f106142a7576101008083540402835291602001916142d2565b820191906000526020600020905b8154815290600101906020018083116142b557829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561436e5780601f106143435761010080835404028352916020019161436e565b820191906000526020600020905b81548152906001019060200180831161435157829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561440a5780601f106143df5761010080835404028352916020019161440a565b820191906000526020600020905b8154815290600101906020018083116143ed57829003601f168201915b5050505050905096509650965096509650965050909192939495565b846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908051906020019061447b929190614e88565b50816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040190805190602001906144d1929190614e88565b506040805190810160405280600581526020017f6a756467650000000000000000000000000000000000000000000000000000008152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061455c929190614e88565b50836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190805190602001906145b2929190614e88565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005019080519060200190614608929190614e88565b50826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301908051906020019061465e929190614e88565b505050505050565b6060600080600080925060009050600092505b6001805490508360ff1610156148d657856040518082805190602001908083835b6020831015156146bf578051825260208201915060208101905060208303925061469a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018460ff1681548110151561470257fe5b9060005260206000209060060201600201604051808280546001816001161561010002031660029004801561476e5780601f1061474c57610100808354040283529182019161476e565b820191906000526020600020905b81548152906001019060200180831161475a575b505091505060405180910390206000191614801561487f5750846040518082805190602001908083835b6020831015156147bd5780518252602082019150602081019050602083039250614798565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018460ff1681548110151561480057fe5b9060005260206000209060060201600301604051808280546001816001161561010002031660029004801561486c5780601f1061484a57610100808354040283529182019161486c565b820191906000526020600020905b815481529060010190602001808311614858575b5050915050604051809103902060001916145b156148c95782828260ff1681548110151561489657fe5b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555080806001019150505b8280600101935050614679565b8180548060200260200160405190810160405280929190818152602001828054801561494757602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116149105790505b5050505050935050505092915050565b600080606080600060038660ff1681548110151561497157fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038760ff168154811015156149b557fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038860ff168154811015156149f957fe5b906000526020600020906005020160020160038960ff16815481101515614a1c57fe5b906000526020600020906005020160030160038a60ff16815481101515614a3f57fe5b906000526020600020906005020160040160009054906101000a900460ff16828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614af35780601f10614ac857610100808354040283529160200191614af3565b820191906000526020600020905b815481529060010190602001808311614ad657829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614b8f5780601f10614b6457610100808354040283529160200191614b8f565b820191906000526020600020905b815481529060010190602001808311614b7257829003601f168201915b505050505091509450945094509450945091939590929450565b6060600080600080925060009050600092505b6002805490508360ff161015614e075785604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660028460ff16815481101515614c3357fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060001916148015614db0575084604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206000191660028460ff16815481101515614d2857fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060001916145b15614dfa5782828260ff16815481101515614dc757fe5b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555080806001019150505b8280600101935050614bbc565b81805480602002602001604051908101604052809291908181526020018280548015614e7857602002820191906000526020600020906000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411614e415790505b5050505050935050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614ec957805160ff1916838001178555614ef7565b82800160010185558215614ef7579182015b82811115614ef6578251825591602001919060010190614edb565b5b509050614f049190614f88565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614f4957805160ff1916838001178555614f77565b82800160010185558215614f77579182015b82811115614f76578251825591602001919060010190614f5b565b5b509050614f849190614f88565b5090565b614faa91905b80821115614fa6576000816000905550600101614f8e565b5090565b905600a165627a7a72305820ec930e3fa764c7b00cd10f19857aa6d37ca86abe91e48a9bba520659b885371c0029";

    public static final String FUNC_GETRECORD = "getRecord";

    public static final String FUNC_CONSUMENOTICE = "consumeNotice";

    public static final String FUNC_GETNOTICENUMBERBYSTART = "getNoticeNumberByStart";

    public static final String FUNC_REGISTERUSER = "registerUser";

    public static final String FUNC_REGISTERNOTICE = "registerNotice";

    public static final String FUNC_GETMUSIC = "getMusic";

    public static final String FUNC_GETNOTICENUMBERBYTO = "getNoticeNumberByTo";

    public static final String FUNC_AUTHORIZEMUSIC = "authorizeMusic";

    public static final String FUNC_REGISTERMUSIC = "registerMusic";

    public static final String FUNC_REGISTERMUSICIAN = "registerMusician";

    public static final String FUNC_CANCELMUSIC = "cancelMusic";

    public static final String FUNC_GETUSERBYADDRESS = "getUserByAddress";

    public static final String FUNC_TRANSFERMUSIC = "transferMusic";

    public static final String FUNC_SEARCHMUSIC = "searchMusic";

    public static final String FUNC_REGISTERCOMPANY = "registerCompany";

    public static final String FUNC_GETUSER = "getUser";

    public static final String FUNC_REGISTERJUDGE = "registerJudge";

    public static final String FUNC_GETMUSICNUMBER = "getMusicNumber";

    public static final String FUNC_GETNOTICE = "getNotice";

    public static final String FUNC_GETRECORDNUMBER = "getRecordNumber";

    @Deprecated
    protected MusicChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MusicChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MusicChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MusicChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple5<String, String, String, String, String>> getRecord(BigInteger numbe) {
        final Function function = new Function(FUNC_GETRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(numbe)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, String>>(
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> consumeNotice(BigInteger _idx) {
        final Function function = new Function(
                FUNC_CONSUMENOTICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_idx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void consumeNotice(BigInteger _idx, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CONSUMENOTICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_idx)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<List> getNoticeNumberByStart(String _start) {
        final Function function = new Function(FUNC_GETNOTICENUMBERBYSTART, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_start)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> registerUser(String _name, String _phone) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerUser(String _name, String _phone, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> registerNotice(String _to, String _music, String _info) {
        final Function function = new Function(
                FUNC_REGISTERNOTICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_music), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_info)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerNotice(String _to, String _music, String _info, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERNOTICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_music), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_info)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple6<String, String, String, String, Boolean, String>> getMusic(BigInteger numb) {
        final Function function = new Function(FUNC_GETMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(numb)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, Boolean, String>>(
                new Callable<Tuple6<String, String, String, String, Boolean, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, Boolean, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<List> getNoticeNumberByTo(String _to) {
        final Function function = new Function(FUNC_GETNOTICENUMBERBYTO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> authorizeMusic(String _to, String _binhash, String _alltime, String _music, String _info) {
        final Function function = new Function(
                FUNC_AUTHORIZEMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_music), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_info)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void authorizeMusic(String _to, String _binhash, String _alltime, String _music, String _info, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_AUTHORIZEMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_music), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_info)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> registerMusic(String _bin, String _mname, String _alltime) {
        final Function function = new Function(
                FUNC_REGISTERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_mname), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerMusic(String _bin, String _mname, String _alltime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_mname), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> registerMusician(String _name, String _id, String _location, String _phone, String _email) {
        final Function function = new Function(
                FUNC_REGISTERMUSICIAN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerMusician(String _name, String _id, String _location, String _phone, String _email, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERMUSICIAN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> cancelMusic(String _binhash, String _alltime) {
        final Function function = new Function(
                FUNC_CANCELMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void cancelMusic(String _binhash, String _alltime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CANCELMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple6<String, String, String, String, String, String>> getUserByAddress(String _user) {
        final Function function = new Function(FUNC_GETUSERBYADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, String>>(
                new Callable<Tuple6<String, String, String, String, String, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> transferMusic(String _to, String _binhash, String _alltime) {
        final Function function = new Function(
                FUNC_TRANSFERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferMusic(String _to, String _binhash, String _alltime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_alltime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple5<String, String, String, String, String>> searchMusic(String _mname, String _singer) {
        final Function function = new Function(FUNC_SEARCHMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_mname), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_singer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, String>>(
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> registerCompany(String _name, String _id, String _location, String _phone, String _email) {
        final Function function = new Function(
                FUNC_REGISTERCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerCompany(String _name, String _id, String _location, String _phone, String _email, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple6<String, String, String, String, String, String>> getUser() {
        final Function function = new Function(FUNC_GETUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, String>>(
                new Callable<Tuple6<String, String, String, String, String, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> registerJudge(String _name, String _id, String _location, String _phone, String _email) {
        final Function function = new Function(
                FUNC_REGISTERJUDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerJudge(String _name, String _id, String _location, String _phone, String _email, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERJUDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<List> getMusicNumber(String _mname, String _singer) {
        final Function function = new Function(FUNC_GETMUSICNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_mname), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_singer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple5<String, String, String, String, Boolean>> getNotice(BigInteger _idx) {
        final Function function = new Function(FUNC_GETNOTICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, Boolean>>(
                new Callable<Tuple5<String, String, String, String, Boolean>>() {
                    @Override
                    public Tuple5<String, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<List> getRecordNumber(String _user, String _author) {
        final Function function = new Function(FUNC_GETRECORDNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_user), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_author)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static MusicChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MusicChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MusicChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MusicChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MusicChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MusicChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MusicChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MusicChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MusicChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MusicChain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MusicChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MusicChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<MusicChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MusicChain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MusicChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MusicChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
