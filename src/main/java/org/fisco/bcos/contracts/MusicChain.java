package org.fisco.bcos.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class MusicChain extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50615ec580620000216000396000f3006080604052600436106101c2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630351bf3d146101c757806307611da4146102765780630fb6674e1461031f57806311cede0a146103e657806312958f1c1461042e57806312e959c4146104be57806316cdcc1b1461056757806316d061a5146105f75780631ab4ce991461068d5780632165fa9a146107b557806323e3eced146108dd5780632bd1e5c5146109865780632ebcb65314610a1e5780633e7f579a14610aae5780635b06522a14610b5757806360c511ba14610c00578063677ac70814610ca957806371b8803714610dd15780637b91f80714610e615780637dcf164814610ed157806385e0c50d14610f3a57806399c8d75714610fc35780639c8df347146110b2578063a2f9719114611122578063a78f18a9146111b2578063abdc11c2146112da578063ac9f0a4014611383578063b1f3b4ee14611504578063b3cbdb301461162c578063ccb018ce146116b5578063ce7c5e73146119e6578063d336dd5f14611a6f578063d6a1896114611adf578063d96bfe0e14611b4f578063dda69ab214611be7578063e939567914611c77575b600080fd5b3480156101d357600080fd5b50610274600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611d1d565b005b34801561028257600080fd5b506102a4600480360381019080803560ff16906020019092919050505061215a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e45780820151818401526020810190506102c9565b50505050905090810190601f1680156103115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032b57600080fd5b506103cc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061221f565b604051808215151515815260200191505060405180910390f35b3480156103f257600080fd5b50610414600480360381019080803560ff16906020019092919050505061247f565b604051808215151515815260200191505060405180910390f35b34801561043a57600080fd5b506104436124b9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610483578082015181840152602081019050610468565b50505050905090810190601f1680156104b05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ca57600080fd5b506104ec600480360381019080803560ff16906020019092919050505061259a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561052c578082015181840152602081019050610511565b50505050905090810190601f1680156105595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561057357600080fd5b5061057c61265f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105bc5780820151818401526020810190506105a1565b50505050905090810190601f1680156105e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561060357600080fd5b5061060c612899565b604051808763ffffffff1663ffffffff1681526020018663ffffffff1663ffffffff1681526020018563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff168152602001965050505050505060405180910390f35b34801561069957600080fd5b5061073a600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612b91565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561077a57808201518184015260208101905061075f565b50505050905090810190601f1680156107a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107c157600080fd5b50610862600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612e7c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108a2578082015181840152602081019050610887565b50505050905090810190601f1680156108cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108e957600080fd5b5061090b600480360381019080803560ff169060200190929190505050613167565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561094b578082015181840152602081019050610930565b50505050905090810190601f1680156109785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561099257600080fd5b506109c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061322c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a0a5780820151818401526020810190506109ef565b505050509050019250505060405180910390f35b348015610a2a57600080fd5b50610a33613394565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a73578082015181840152602081019050610a58565b50505050905090810190601f168015610aa05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610aba57600080fd5b50610adc600480360381019080803560ff169060200190929190505050613475565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b1c578082015181840152602081019050610b01565b50505050905090810190601f168015610b495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b6357600080fd5b50610b85600480360381019080803560ff16906020019092919050505061353a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bc5578082015181840152602081019050610baa565b50505050905090810190601f168015610bf25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c0c57600080fd5b50610c2e600480360381019080803560ff1690602001909291905050506135ff565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c6e578082015181840152602081019050610c53565b50505050905090810190601f168015610c9b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610cb557600080fd5b50610d56600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506136c4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d96578082015181840152602081019050610d7b565b50505050905090810190601f168015610dc35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ddd57600080fd5b50610de66139af565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e26578082015181840152602081019050610e0b565b50505050905090810190601f168015610e535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e6d57600080fd5b50610e8f600480360381019080803560ff169060200190929190505050613a90565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610edd57600080fd5b50610f38600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613add565b005b348015610f4657600080fd5b50610fc1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613d91565b005b348015610fcf57600080fd5b50611070600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506141f0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156110be57600080fd5b506110e0600480360381019080803560ff169060200190929190505050614463565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561112e57600080fd5b506111376144b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561117757808201518184015260208101905061115c565b50505050905090810190601f1680156111a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156111be57600080fd5b5061125f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614591565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561129f578082015181840152602081019050611284565b50505050905090810190601f1680156112cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156112e657600080fd5b50611308600480360381019080803560ff16906020019092919050505061487c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561134857808201518184015260208101905061132d565b50505050905090810190601f1680156113755780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561138f57600080fd5b50611502600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614941565b005b34801561151057600080fd5b506115b1600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614bb1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156115f15780820151818401526020810190506115d6565b50505050905090810190601f16801561161e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561163857600080fd5b506116b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614e9c565b005b3480156116c157600080fd5b5061171c600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506150a7565b60405180806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001806020018060200187810387528e818151815260200191508051906020019080838360005b838110156117a2578082015181840152602081019050611787565b50505050905090810190601f1680156117cf5780820380516001836020036101000a031916815260200191505b5087810386528c818151815260200191508051906020019080838360005b838110156118085780820151818401526020810190506117ed565b50505050905090810190601f1680156118355780820380516001836020036101000a031916815260200191505b5087810385528b818151815260200191508051906020019080838360005b8381101561186e578082015181840152602081019050611853565b50505050905090810190601f16801561189b5780820380516001836020036101000a031916815260200191505b5087810384528a818151815260200191508051906020019080838360005b838110156118d45780820151818401526020810190506118b9565b50505050905090810190601f1680156119015780820380516001836020036101000a031916815260200191505b50878103835289818151815260200191508051906020019080838360005b8381101561193a57808201518184015260208101905061191f565b50505050905090810190601f1680156119675780820380516001836020036101000a031916815260200191505b50878103825288818151815260200191508051906020019080838360005b838110156119a0578082015181840152602081019050611985565b50505050905090810190601f1680156119cd5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b3480156119f257600080fd5b50611a6d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506156b4565b005b348015611a7b57600080fd5b50611a9d600480360381019080803560ff169060200190929190505050615837565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015611aeb57600080fd5b50611b0d600480360381019080803560ff169060200190929190505050615884565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015611b5b57600080fd5b50611b90600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506158d1565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015611bd3578082015181840152602081019050611bb8565b505050509050019250505060405180910390f35b348015611bf357600080fd5b50611bfc615ab2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611c3c578082015181840152602081019050611c21565b50505050905090810190601f168015611c695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015611c8357600080fd5b50611ca260048036038101908080359060200190929190505050615b93565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611ce2578082015181840152602081019050611cc7565b50505050905090810190601f168015611d0f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008060009150600090505b6001805490508160ff161015611e4757836040518082805190602001908083835b602083101515611d6f5780518252602082019150602081019050602083039250611d4a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff16815481101515611db257fe5b90600052602060002090600902016001016040518082805460018160011615610100020316600290048015611e1e5780601f10611dfc576101008083540402835291820191611e1e565b820191906000526020600020905b815481529060010190602001808311611e0a575b50509150506040518091039020600019161415611e3a57600191505b8080600101915050611d29565b60008260ff16141515611e5957600080fd5b6001610120604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f655780601f10611f3a57610100808354040283529160200191611f65565b820191906000526020600020905b815481529060010190602001808311611f4857829003601f168201915b5050505050815260200160011515815260200160206040519081016040528060008152508152602001602060405190810160405280600081525081526020016040805190810160405280600381526020017f4e61680000000000000000000000000000000000000000000000000000000000815250815260200160206040519081016040528060008152508152509080600181540180825580915050906001820390600052602060002090600902016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190612081929190615d74565b50604082015181600201908051906020019061209e929190615d74565b5060608201518160030190805190602001906120bb929190615d74565b5060808201518160040160006101000a81548160ff02191690831515021790555060a08201518160050190805190602001906120f8929190615d74565b5060c0820151816006019080519060200190612115929190615d74565b5060e0820151816007019080519060200190612132929190615d74565b50610100820151816008019080519060200190612150929190615d74565b5050505050505050565b606060028260ff1681548110151561216e57fe5b90600052602060002090600702016004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122135780601f106121e857610100808354040283529160200191612213565b820191906000526020600020905b8154815290600101906020018083116121f657829003601f168201915b50505050509050919050565b600080600090505b6001805490508160ff16101561247757836040518082805190602001908083835b60208310151561226d5780518252602082019150602081019050602083039250612248565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff168154811015156122b057fe5b9060005260206000209060090201600201604051808280546001816001161561010002031660029004801561231c5780601f106122fa57610100808354040283529182019161231c565b820191906000526020600020905b815481529060010190602001808311612308575b505091505060405180910390206000191614801561242d5750826040518082805190602001908083835b60208310151561236b5780518252602082019150602081019050602083039250612346565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff168154811015156123ae57fe5b9060005260206000209060090201600301604051808280546001816001161561010002031660029004801561241a5780601f106123f857610100808354040283529182019161241a565b820191906000526020600020905b815481529060010190602001808311612406575b5050915050604051809103902060001916145b1561246a5760018160ff1681548110151561244457fe5b906000526020600020906009020160040160009054906101000a900460ff169150612478565b8080600101915050612227565b5b5092915050565b600060038260ff1681548110151561249357fe5b906000526020600020906005020160040160009054906101000a900460ff169050919050565b60606000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125905780601f1061256557610100808354040283529160200191612590565b820191906000526020600020905b81548152906001019060200180831161257357829003601f168201915b5050505050905090565b606060028260ff168154811015156125ae57fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126535780601f1061262857610100808354040283529160200191612653565b820191906000526020600020905b81548152906001019060200180831161263657829003601f168201915b50505050509050919050565b60606000606080606080606080600080612677612899565b909192935090919250909150905050809950506126998963ffffffff16615b93565b97506040805190810160405280600581526020017f6d6f6e7468000000000000000000000000000000000000000000000000000000815250965087955086945084518651016040519080825280601f01601f1916602001820160405280156127105781602001602082028038833980820191505090505b50935083925060009150600090505b85518110156127d257858181518110151561273657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561279557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061271f565b600090505b845181101561288a5784818151811015156127ee57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561284d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506127d7565b82995050505050505050505090565b60008060008060008060008060008060008060006060600080429950600d6040519080825280602002602001820160405280156128e55781602001602082028038833980820191505090505b50925060008360008151811015156128f957fe5b9060200190602002018181525050601f83600181518110151561291857fe5b9060200190602002018181525050603b83600281518110151561293757fe5b9060200190602002018181525050605a83600381518110151561295657fe5b9060200190602002018181525050607883600481518110151561297557fe5b9060200190602002018181525050609783600581518110151561299457fe5b906020019060200201818152505060b58360068151811015156129b357fe5b906020019060200201818152505060d48360078151811015156129d257fe5b906020019060200201818152505060f38360088151811015156129f157fe5b9060200190602002018181525050610111836009815181101515612a1157fe5b906020019060200201818152505061013083600a815181101515612a3157fe5b906020019060200201818152505061014e83600b815181101515612a5157fe5b906020019060200201818152505061016d83600c815181101515612a7157fe5b906020019060200201818152505062015180635c2a3d008b03811515612a9357fe5b069150610e108263ffffffff16811515612aa957fe5b049650603c610e108802830363ffffffff16811515612ac457fe5b049550603c8902610e108802830303945062015180635c2a3d008b03811515612ae957fe5b04935060009050600090505b600d8163ffffffff161015612b6857828163ffffffff16815181101515612b1857fe5b906020019060200201518460ff161015612b5b57809850826001820363ffffffff16815181101515612b4657fe5b906020019060200201518463ffffffff160397505b8080600101915050612af5565b6107e389898989898595509f509f509f509f509f509f5050505050505050505050909192939495565b606060008090505b6001805490508160ff161015612e7457836040518082805190602001908083835b602083101515612bdf5780518252602082019150602081019050602083039250612bba565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff16815481101515612c2257fe5b90600052602060002090600902016002016040518082805460018160011615610100020316600290048015612c8e5780601f10612c6c576101008083540402835291820191612c8e565b820191906000526020600020905b815481529060010190602001808311612c7a575b5050915050604051809103902060001916148015612d9f5750826040518082805190602001908083835b602083101515612cdd5780518252602082019150602081019050602083039250612cb8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff16815481101515612d2057fe5b90600052602060002090600902016003016040518082805460018160011615610100020316600290048015612d8c5780601f10612d6a576101008083540402835291820191612d8c565b820191906000526020600020905b815481529060010190602001808311612d78575b5050915050604051809103902060001916145b15612e675760018160ff16815481101515612db657fe5b90600052602060002090600902016008018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e5b5780601f10612e3057610100808354040283529160200191612e5b565b820191906000526020600020905b815481529060010190602001808311612e3e57829003601f168201915b50505050509150612e75565b8080600101915050612b99565b5b5092915050565b606060008090505b6001805490508160ff16101561315f57836040518082805190602001908083835b602083101515612eca5780518252602082019150602081019050602083039250612ea5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff16815481101515612f0d57fe5b90600052602060002090600902016002016040518082805460018160011615610100020316600290048015612f795780601f10612f57576101008083540402835291820191612f79565b820191906000526020600020905b815481529060010190602001808311612f65575b505091505060405180910390206000191614801561308a5750826040518082805190602001908083835b602083101515612fc85780518252602082019150602081019050602083039250612fa3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff1681548110151561300b57fe5b906000526020600020906009020160030160405180828054600181600116156101000203166002900480156130775780601f10613055576101008083540402835291820191613077565b820191906000526020600020905b815481529060010190602001808311613063575b5050915050604051809103902060001916145b156131525760018160ff168154811015156130a157fe5b90600052602060002090600902016001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131465780601f1061311b57610100808354040283529160200191613146565b820191906000526020600020905b81548152906001019060200180831161312957829003601f168201915b50505050509150613160565b8080600101915050612e84565b5b5092915050565b606060028260ff1681548110151561317b57fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132205780601f106131f557610100808354040283529160200191613220565b820191906000526020600020905b81548152906001019060200180831161320357829003601f168201915b50505050509050919050565b60606000806000809150600090505b6002805490508160ff161015613314578473ffffffffffffffffffffffffffffffffffffffff1660038260ff1681548110151561327457fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156133075780838360ff168154811015156132d457fe5b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555081806001019250505b808060010191505061323b565b8280548060200260200160405190810160405280929190818152602001828054801561338557602002820191906000526020600020906000905b82829054906101000a900460ff1660ff168152602001906001019060208260000104928301926001038202915080841161334e5790505b50505050509350505050919050565b60606000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561346b5780601f106134405761010080835404028352916020019161346b565b820191906000526020600020905b81548152906001019060200180831161344e57829003601f168201915b5050505050905090565b606060038260ff1681548110151561348957fe5b90600052602060002090600502016002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561352e5780601f106135035761010080835404028352916020019161352e565b820191906000526020600020905b81548152906001019060200180831161351157829003601f168201915b50505050509050919050565b606060038260ff1681548110151561354e57fe5b90600052602060002090600502016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135f35780601f106135c8576101008083540402835291602001916135f3565b820191906000526020600020905b8154815290600101906020018083116135d657829003601f168201915b50505050509050919050565b606060028260ff1681548110151561361357fe5b90600052602060002090600702016006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136b85780601f1061368d576101008083540402835291602001916136b8565b820191906000526020600020905b81548152906001019060200180831161369b57829003601f168201915b50505050509050919050565b606060008090505b6001805490508160ff1610156139a757836040518082805190602001908083835b60208310151561371257805182526020820191506020810190506020830392506136ed565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff1681548110151561375557fe5b906000526020600020906009020160020160405180828054600181600116156101000203166002900480156137c15780601f1061379f5761010080835404028352918201916137c1565b820191906000526020600020905b8154815290600101906020018083116137ad575b50509150506040518091039020600019161480156138d25750826040518082805190602001908083835b60208310151561381057805182526020820191506020810190506020830392506137eb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff1681548110151561385357fe5b906000526020600020906009020160030160405180828054600181600116156101000203166002900480156138bf5780601f1061389d5761010080835404028352918201916138bf565b820191906000526020600020905b8154815290600101906020018083116138ab575b5050915050604051809103902060001916145b1561399a5760018160ff168154811015156138e957fe5b90600052602060002090600902016007018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561398e5780601f106139635761010080835404028352916020019161398e565b820191906000526020600020905b81548152906001019060200180831161397157829003601f168201915b505050505091506139a8565b80806001019150506136cc565b5b5092915050565b60606000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a865780601f10613a5b57610100808354040283529160200191613a86565b820191906000526020600020905b815481529060010190602001808311613a6957829003601f168201915b5050505050905090565b600060038260ff16815481101515613aa457fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060009150339050600091505b6001805490508260ff161015613d8c578073ffffffffffffffffffffffffffffffffffffffff1660018360ff16815481101515613b2557fe5b906000526020600020906009020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015613c6d5750826040518082805190602001908083835b602083101515613bab5780518252602082019150602081019050602083039250613b86565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018360ff16815481101515613bee57fe5b90600052602060002090600902016001016040518082805460018160011615610100020316600290048015613c5a5780601f10613c38576101008083540402835291820191613c5a565b820191906000526020600020905b815481529060010190602001808311613c46575b5050915050604051809103902060001916145b8015613cad57506001151560018360ff16815481101515613c8a57fe5b906000526020600020906009020160040160009054906101000a900460ff161515145b15613d7f57600060018360ff16815481101515613cc657fe5b906000526020600020906009020160040160006101000a81548160ff021916908315150217905550602060405190810160405280600081525060018360ff16815481101515613d1157fe5b90600052602060002090600902016005019080519060200190613d35929190615df4565b50602060405190810160405280600081525060018360ff16815481101515613d5957fe5b90600052602060002090600902016006019080519060200190613d7d929190615df4565b505b8180600101925050613aec565b505050565b600080600033925060009150600091505b6001805490508260ff1610156141e957836040518082805190602001908083835b602083101515613de85780518252602082019150602081019050602083039250613dc3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018360ff16815481101515613e2b57fe5b90600052602060002090600902016001016040518082805460018160011615610100020316600290048015613e975780601f10613e75576101008083540402835291820191613e97565b820191906000526020600020905b815481529060010190602001808311613e83575b5050915050604051809103902060001916148015613f2357503373ffffffffffffffffffffffffffffffffffffffff1660018360ff16815481101515613ed957fe5b906000526020600020906009020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156141dc57338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083816002019080519060200190613fc6929190615df4565b50600260e0604051908101604052808773ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001602060405190810160405280600081525081526020016040805190810160405280600381526020017f4e6168000000000000000000000000000000000000000000000000000000000081525081526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152509080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190614163929190615d74565b506060820151816003019080519060200190614180929190615d74565b50608082015181600401908051906020019061419d929190615d74565b5060a08201518160050190805190602001906141ba929190615d74565b5060c08201518160060190805190602001906141d7929190615d74565b505050505b8180600101925050613da2565b5050505050565b600080600090505b6001805490508160ff16101561445b57836040518082805190602001908083835b60208310151561423e5780518252602082019150602081019050602083039250614219565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff1681548110151561428157fe5b906000526020600020906009020160020160405180828054600181600116156101000203166002900480156142ed5780601f106142cb5761010080835404028352918201916142ed565b820191906000526020600020905b8154815290600101906020018083116142d9575b50509150506040518091039020600019161480156143fe5750826040518082805190602001908083835b60208310151561433c5780518252602082019150602081019050602083039250614317565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff1681548110151561437f57fe5b906000526020600020906009020160030160405180828054600181600116156101000203166002900480156143eb5780601f106143c95761010080835404028352918201916143eb565b820191906000526020600020905b8154815290600101906020018083116143d7575b5050915050604051809103902060001916145b1561444e5760018160ff1681548110151561441557fe5b906000526020600020906009020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915061445c565b80806001019150506141f8565b5b5092915050565b600060038260ff1681548110151561447757fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60606000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156145875780601f1061455c57610100808354040283529160200191614587565b820191906000526020600020905b81548152906001019060200180831161456a57829003601f168201915b5050505050905090565b606060008090505b6001805490508160ff16101561487457836040518082805190602001908083835b6020831015156145df57805182526020820191506020810190506020830392506145ba565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff1681548110151561462257fe5b9060005260206000209060090201600201604051808280546001816001161561010002031660029004801561468e5780601f1061466c57610100808354040283529182019161468e565b820191906000526020600020905b81548152906001019060200180831161467a575b505091505060405180910390206000191614801561479f5750826040518082805190602001908083835b6020831015156146dd57805182526020820191506020810190506020830392506146b8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff1681548110151561472057fe5b9060005260206000209060090201600301604051808280546001816001161561010002031660029004801561478c5780601f1061476a57610100808354040283529182019161478c565b820191906000526020600020905b815481529060010190602001808311614778575b5050915050604051809103902060001916145b156148675760018160ff168154811015156147b657fe5b90600052602060002090600902016005018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561485b5780601f106148305761010080835404028352916020019161485b565b820191906000526020600020905b81548152906001019060200180831161483e57829003601f168201915b50505050509150614875565b8080600101915050614599565b5b5092915050565b606060028260ff1681548110151561489057fe5b90600052602060002090600702016005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156149355780601f1061490a57610100808354040283529160200191614935565b820191906000526020600020905b81548152906001019060200180831161491857829003601f168201915b50505050509050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160405180828054600181600116156101000203166002900480156149df5780601f106149bd5761010080835404028352918201916149df565b820191906000526020600020905b8154815290600101906020018083116149cb575b50509150506040518091039020600019161415156149fc57600080fd5b846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190614a51929190615df4565b50836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190614aa7929190615df4565b50826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019080519060200190614afd929190615df4565b50816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019080519060200190614b53929190615df4565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004019080519060200190614ba9929190615df4565b505050505050565b606060008090505b6001805490508160ff161015614e9457836040518082805190602001908083835b602083101515614bff5780518252602082019150602081019050602083039250614bda565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff16815481101515614c4257fe5b90600052602060002090600902016002016040518082805460018160011615610100020316600290048015614cae5780601f10614c8c576101008083540402835291820191614cae565b820191906000526020600020905b815481529060010190602001808311614c9a575b5050915050604051809103902060001916148015614dbf5750826040518082805190602001908083835b602083101515614cfd5780518252602082019150602081019050602083039250614cd8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff16815481101515614d4057fe5b90600052602060002090600902016003016040518082805460018160011615610100020316600290048015614dac5780601f10614d8a576101008083540402835291820191614dac565b820191906000526020600020905b815481529060010190602001808311614d98575b5050915050604051809103902060001916145b15614e875760018160ff16815481101515614dd657fe5b90600052602060002090600902016006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614e7b5780601f10614e5057610100808354040283529160200191614e7b565b820191906000526020600020905b815481529060010190602001808311614e5e57829003601f168201915b50505050509150614e95565b8080600101915050614bb9565b5b5092915050565b60008033915060009050600090505b6001805490508160ff1610156150a15760018160ff16815481101515614ecd57fe5b906000526020600020906009020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614801561502c5750826040518082805190602001908083835b602083101515614f6a5780518252602082019150602081019050602083039250614f45565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff16815481101515614fad57fe5b906000526020600020906009020160010160405180828054600181600116156101000203166002900480156150195780601f10614ff7576101008083540402835291820191615019565b820191906000526020600020905b815481529060010190602001808311615005575b5050915050604051809103902060001916145b15615094578360018260ff1681548110151561504457fe5b906000526020600020906009020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8080600101915050614eab565b50505050565b6060600060608060608060606000809050600090505b6001805490508160ff1610156156a757886040518082805190602001908083835b60208310151561510357805182526020820191506020810190506020830392506150de565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660018260ff1681548110151561514657fe5b906000526020600020906009020160010160405180828054600181600116156101000203166002900480156151b25780601f106151905761010080835404028352918201916151b2565b820191906000526020600020905b81548152906001019060200180831161519e575b5050915050604051809103902060001916141561569a5760018160ff168154811015156151db57fe5b906000526020600020906009020160020160018260ff168154811015156151fe57fe5b906000526020600020906009020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660018360ff1681548110151561524257fe5b906000526020600020906009020160030160018460ff1681548110151561526557fe5b906000526020600020906009020160050160018560ff1681548110151561528857fe5b906000526020600020906009020160060160018660ff168154811015156152ab57fe5b906000526020600020906009020160070160018760ff168154811015156152ce57fe5b9060005260206000209060090201600801868054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156153745780601f1061534957610100808354040283529160200191615374565b820191906000526020600020905b81548152906001019060200180831161535757829003601f168201915b50505050509650848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156154105780601f106153e557610100808354040283529160200191615410565b820191906000526020600020905b8154815290600101906020018083116153f357829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156154ac5780601f10615481576101008083540402835291602001916154ac565b820191906000526020600020905b81548152906001019060200180831161548f57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156155485780601f1061551d57610100808354040283529160200191615548565b820191906000526020600020905b81548152906001019060200180831161552b57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156155e45780601f106155b9576101008083540402835291602001916155e4565b820191906000526020600020905b8154815290600101906020018083116155c757829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156156805780601f1061565557610100808354040283529160200191615680565b820191906000526020600020905b81548152906001019060200180831161566357829003601f168201915b5050505050905097509750975097509750975097506156a8565b80806001019150506150bd565b5b50919395979092949650565b600360a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160206040519081016040528060008152508152602001838152602001600015158152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906157f2929190615d74565b50606082015181600301908051906020019061580f929190615d74565b5060808201518160040160006101000a81548160ff0219169083151502179055505050505050565b600060028260ff1681548110151561584b57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600060028260ff1681548110151561589857fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60606000806000809150600090505b6002805490508160ff161015615a32578473ffffffffffffffffffffffffffffffffffffffff1660028260ff1681548110151561591957fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806159db57508473ffffffffffffffffffffffffffffffffffffffff1660028260ff1681548110151561599157fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15615a255780838360ff168154811015156159f257fe5b90600052602060002090602091828204019190066101000a81548160ff021916908360ff16021790555081806001019250505b80806001019150506158e0565b82805480602002602001604051908101604052809291908181526020018280548015615aa357602002820191906000526020600020906000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411615a6c5790505b50505050509350505050919050565b60606000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615b895780601f10615b5e57610100808354040283529160200191615b89565b820191906000526020600020905b815481529060010190602001808311615b6c57829003601f168201915b5050505050905090565b6060600060606000806060600060649550856040519080825280601f01601f191660200182016040528015615bd75781602001602082028038833980820191505090505b509450600093505b600088141515615c7657600a88811515615bf557fe5b069250600a88811515615c0457fe5b049750826030017f0100000000000000000000000000000000000000000000000000000000000000028585806001019650815181101515615c4157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350615bdf565b600184016040519080825280601f01601f191660200182016040528015615cac5781602001602082028038833980820191505090505b509150600090505b8381111515615d635784818503815181101515615ccd57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028282815181101515615d2657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050615cb4565b819650869650505050505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615db557805160ff1916838001178555615de3565b82800160010185558215615de3579182015b82811115615de2578251825591602001919060010190615dc7565b5b509050615df09190615e74565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615e3557805160ff1916838001178555615e63565b82800160010185558215615e63579182015b82811115615e62578251825591602001919060010190615e47565b5b509050615e709190615e74565b5090565b615e9691905b80821115615e92576000816000905550600101615e7a565b5090565b905600a165627a7a723058208515484a3715a04966e4df817215f7b15c4748d4de6b46bf9f6985c8e27d6a540029";

    public static final String FUNC_REGISTERMUSIC = "registerMusic";

    public static final String FUNC_GETRECORDETIME = "getRecordETime";

    public static final String FUNC_GETMUSICISVALIDBYSEARCH = "getMusicIsvalidBySearch";

    public static final String FUNC_GETNOTICEVALID = "getNoticeValid";

    public static final String FUNC_GETUSERNAME = "getUserName";

    public static final String FUNC_GETRECORDBIN = "getRecordBin";

    public static final String FUNC_STRCONCAT = "strConcat";

    public static final String FUNC_GETTIME = "gettime";

    public static final String FUNC_GETMUSICMODIFIEDBYSEARCH = "getMusicModifiedBySearch";

    public static final String FUNC_GETMUSICBINBYSEARCH = "getMusicBinBySearch";

    public static final String FUNC_GETRECORDBTIME = "getRecordBTime";

    public static final String FUNC_GETNOTICENUMBER = "getNoticeNumber";

    public static final String FUNC_GETUSERID = "getUserId";

    public static final String FUNC_GETNOTICETEXT = "getNoticeText";

    public static final String FUNC_GETNOTICETIME = "getNoticeTime";

    public static final String FUNC_GETRECORDMODIFIED = "getRecordModified";

    public static final String FUNC_GETMUSICPLATORMBYSEARCH = "getMusicPlatormBySearch";

    public static final String FUNC_GETUSEREMAIL = "getUserEmail";

    public static final String FUNC_GETNOTICEFROM = "getNoticeFrom";

    public static final String FUNC_CANCELMUSIC = "cancelMusic";

    public static final String FUNC_AUTHORIZEMUSIC = "authorizeMusic";

    public static final String FUNC_GETMUSICOWNERBYSEARCH = "getMusicOwnerBySearch";

    public static final String FUNC_GETNOTICETO = "getNoticeTo";

    public static final String FUNC_GETUSERLOCATION = "getUserLocation";

    public static final String FUNC_GETMUSICBTIMEBYSEARCH = "getMusicBtimeBySearch";

    public static final String FUNC_GETRECORDPLATFORM = "getRecordPlatform";

    public static final String FUNC_REGISTERUSER = "registerUser";

    public static final String FUNC_GETMUSICETIMEBYSEARCH = "getMusicEtimeBySearch";

    public static final String FUNC_TRANSFERMUSIC = "transferMusic";

    public static final String FUNC_CONSULT = "consult";

    public static final String FUNC_REGISTERNOTICE = "registerNotice";

    public static final String FUNC_GETRECORDAUTHOR = "getRecordAuthor";

    public static final String FUNC_GETRECORDUSER = "getRecordUser";

    public static final String FUNC_GETRECORDNUMBER = "getRecordNumber";

    public static final String FUNC_GETUSERPHONE = "getUserPhone";

    public static final String FUNC_UINTTOSTRING = "uintToString";

    @Deprecated
    protected MusicChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MusicChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MusicChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MusicChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> registerMusic(String _bin, String _name) {
        final Function function = new Function(
                FUNC_REGISTERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerMusic(String _bin, String _name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bin), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<String> getRecordETime(BigInteger _num) {
        final Function function = new Function(FUNC_GETRECORDETIME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> getMusicIsvalidBySearch(String _name, String _singer) {
        final Function function = new Function(FUNC_GETMUSICISVALIDBYSEARCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_singer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> getNoticeValid(BigInteger _num) {
        final Function function = new Function(FUNC_GETNOTICEVALID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getUserName() {
        final Function function = new Function(FUNC_GETUSERNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getRecordBin(BigInteger _num) {
        final Function function = new Function(FUNC_GETRECORDBIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> strConcat() {
        final Function function = new Function(
                FUNC_STRCONCAT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void strConcat(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_STRCONCAT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> gettime() {
        final Function function = new Function(
                FUNC_GETTIME, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void gettime(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETTIME, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<String> getMusicModifiedBySearch(String _name, String _singer) {
        final Function function = new Function(FUNC_GETMUSICMODIFIEDBYSEARCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_singer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getMusicBinBySearch(String _name, String _singer) {
        final Function function = new Function(FUNC_GETMUSICBINBYSEARCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_singer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getRecordBTime(BigInteger _num) {
        final Function function = new Function(FUNC_GETRECORDBTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getNoticeNumber(String _address) {
        final Function function = new Function(FUNC_GETNOTICENUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> getUserId() {
        final Function function = new Function(FUNC_GETUSERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getNoticeText(BigInteger _num) {
        final Function function = new Function(FUNC_GETNOTICETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getNoticeTime(BigInteger _num) {
        final Function function = new Function(FUNC_GETNOTICETIME, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getRecordModified(BigInteger _num) {
        final Function function = new Function(FUNC_GETRECORDMODIFIED, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getMusicPlatormBySearch(String _name, String _singer) {
        final Function function = new Function(FUNC_GETMUSICPLATORMBYSEARCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_singer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getUserEmail() {
        final Function function = new Function(FUNC_GETUSEREMAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getNoticeFrom(BigInteger _num) {
        final Function function = new Function(FUNC_GETNOTICEFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> cancelMusic(String _binhash) {
        final Function function = new Function(
                FUNC_CANCELMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void cancelMusic(String _binhash, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CANCELMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> authorizeMusic(String _to, String _binhash) {
        final Function function = new Function(
                FUNC_AUTHORIZEMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void authorizeMusic(String _to, String _binhash, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_AUTHORIZEMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<String> getMusicOwnerBySearch(String _name, String _singer) {
        final Function function = new Function(FUNC_GETMUSICOWNERBYSEARCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_singer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getNoticeTo(BigInteger _num) {
        final Function function = new Function(FUNC_GETNOTICETO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getUserLocation() {
        final Function function = new Function(FUNC_GETUSERLOCATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getMusicBtimeBySearch(String _name, String _singer) {
        final Function function = new Function(FUNC_GETMUSICBTIMEBYSEARCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_singer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getRecordPlatform(BigInteger _num) {
        final Function function = new Function(FUNC_GETRECORDPLATFORM, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> registerUser(String _name, String _id, String _location, String _phone, String _email) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerUser(String _name, String _id, String _location, String _phone, String _email, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_location), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_email)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<String> getMusicEtimeBySearch(String _name, String _singer) {
        final Function function = new Function(FUNC_GETMUSICETIMEBYSEARCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_singer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferMusic(String _to, String _binhash) {
        final Function function = new Function(
                FUNC_TRANSFERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferMusic(String _to, String _binhash, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERMUSIC, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_binhash)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple7<String, String, String, String, String, String, String>> consult(String _bin) {
        final Function function = new Function(FUNC_CONSULT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bin)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple7<String, String, String, String, String, String, String>>(
                new Callable<Tuple7<String, String, String, String, String, String, String>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> registerNotice(String _to, String _text) {
        final Function function = new Function(
                FUNC_REGISTERNOTICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_text)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerNotice(String _to, String _text, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERNOTICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_text)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<String> getRecordAuthor(BigInteger _num) {
        final Function function = new Function(FUNC_GETRECORDAUTHOR, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getRecordUser(BigInteger _num) {
        final Function function = new Function(FUNC_GETRECORDUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getRecordNumber(String _address) {
        final Function function = new Function(FUNC_GETRECORDNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> getUserPhone() {
        final Function function = new Function(FUNC_GETUSERPHONE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> uintToString(BigInteger v) {
        final Function function = new Function(
                FUNC_UINTTOSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(v)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void uintToString(BigInteger v, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UINTTOSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(v)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    @Deprecated
    public static MusicChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MusicChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MusicChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MusicChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MusicChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MusicChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MusicChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MusicChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MusicChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MusicChain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MusicChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MusicChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<MusicChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MusicChain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MusicChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MusicChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
